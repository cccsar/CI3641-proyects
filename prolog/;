expr --> term.
expr --> term, [+], expr.
expr --> term, [-], expr.
term --> num.
term --> num, [*], term.
term --> num, [/], term.
num  --> [D], { number(D) }.

parse(E) :- expr(E, []).

/* string_lower/2 , string_upper/2 
 * current_predicate/1
 * atom_string/2 , string_chars/2
 * split_string/4
 * char_code/2, between/3
 * string_codes/2
 * atom_prefix/2, atom_concat/3, atom_length
 * sub_atom_icasechk/3
 */

%% reckognized \
name --> [N], { is_propper_noun(N) }.
name --> [N], { is_propper_noun(N) }, name.

nounParticle --> [N], { member(N,['book','music','film','project','class','gamer','aternoon']) }. 
nounParticle --> [N], { atom_concat(X,s,N), member(X,['book','music','film','project','class','gamer','aternoon']) }.
%% reckognized /

remPronouns --> [N], { member(N,['i','you','he','she','it','we','they']) }.
remPronouns --> [N], { atom_concat(PFX,SFX,N), atom_length(PFX,1), downcase_atom(PFX,NPFX), atom_concat(NPFX,SFX,T) , member(T,['i','you','he','she','it','we','they']) }.

my_parse(E) :- remPronouns(E,[]). 

nameCheck(NAME) :- 
    atom_concat(PFX,SFX,NAME),
    atom_length(PFX,1),
    upcase_atom(PFX,UCASEPFX),
    downcase_atom(SFX,DCASESFX),
    atom_concat('',SFX,DCASESFX),
    sub_atom_icasechk(NAME,0,UCASEPFX).

is_propper_noun(X)ã€€:- 
    atom_codes(X,[Y|YS]),
    check_range([Y],65,90), %initial uppercased
    check_range(YS,97,122). %remaining lowercased



% Checks that a string's characters are on some range
check_range([],_,_).
check_range([X|XS],U,B) :-
    between(U,B,X),
    check_range(XS,U,B).
 
main(X) :- 
    split_string(X," \n\t\r"," \n\t\r",L),
    string_to_atoms(L,[],R),
    my_parse(R),
    write(R), !.
    
string_to_atoms([X|XS],Y,Q) :-
    %string_lower(X,I), no hizo falta porque el atomo de "PRUEBA" seria 'PRUEBA' 
    atom_string(P,X),
    append(Y,[P],R),
    string_to_atoms(XS,R,Q).
string_to_atoms([],Y,Y) .
